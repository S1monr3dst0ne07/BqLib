"arbitrary precision arithmetic library
"number stored as list of 16-bit words and size of said list


use 'libs/stack.baabnq';
use 'libs/no.baabnq';
use 'libs/math.baabnq';


jump Bignum::Skip;


"struct for holding bignum and it's respective size
"index 0 of list contains lsb, index -1 contains msb
"NPtr + 0      <size of list>
"NPtr + 1      <sign of number, 0:+ 1:- > (!!!NOT YET IMPL!!!)
"NPtr + 2 + x  <elem x for number>
"...


"(Size::Int) => (Num::Bignum*)
lab Bignum::New;
    sub Stack::Swap;
    pull _size;

    "alloc new Bignum
    new _size + 2 _ptr;
    put _size -> _ptr; "size
    
    push _ptr;
    sub Stack::Swap;
    return;

"(Base::Bignum*, Num::Int)
"adds normal int to the bignum
lab Bignum::AddSmall;
    sub Stack::Swap;
    pull _num;
    sub Stack::Swap;
    pull _ptr;

    put _i = 0;
    put _size <- _ptr;
    lab Bignum::AddSmall::Loop;
        "save old elem for carry check
        put _old <- _ptr + 2 + _i;

        "add
        put _new = _old + _num;
        put _new -> _ptr + 2 + _i;
        
        "carry check
        jump Bignum::AddSmall::Done ~ _new > _old;

        "DEBUG
        put __ <- _ptr + 3;
        print __;

        "carry to next bit
        put _num = 1;
        put _i = _i + 1;
    jump Bignum::AddSmall::Loop ~ _i - 1 < _size;
    lab Bignum::AddSmall::Done;
    
    return;

"(Val1::Bignum*, Val2::Bignum*) => (Val::Bool)
"Val = Val1 > Val2
"!!! size of both bignums must be the same !!!
lab Bignum::Cmp;
    sub Stack::Swap;
    pull _ptr2;
    sub Stack::Swap;
    pull _ptr1;

    put _size1 <- _ptr1;
    put _size2 <- _ptr2;
    sub No::Panic ~ _size1 != _size2;

    push _size1;
    push _size2;
    sub Math::Min;
    pull _i;

    lab Bignum::Cmp::Loop;
        put _val1 <- _ptr1 + 2 + _i;
        put _val2 <- _ptr2 + 2 + _i;

        jump Bignum::Cmp::False ~ _val1 != _val2;

        print _val1;
        print _val2;

        put _i = _i - 1;
    jump Bignum::Cmp::Loop ~ _i != 0;

        push 1;
        sub Stack::Swap;
        return;

    lab Bignum::Cmp::False;
        push 0;
        sub Stack::Swap;
        return;



lab Bignum::Skip;


