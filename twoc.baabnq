"2's compliment lib

use 'libs/stack.baabnq';
use 'libs/math.baabnq';

put _Twoc::Val1 = 0;
put _Twoc::Val2 = 0;
put _Twoc::Sgn1 = 0;
put _Twoc::Sgn2 = 0;


jump Twoc::Skip;


"(Value::Comp) => (Sign::Bool)
lab Twoc::GetSign;
    sub Stack::Swap;
    pull _Twoc::Temp;
    push (_Twoc::Temp >> 15) & 1;
    sub Stack::Swap;
    return;

"(Value::Comp) => (Value::Comp)
lab Twoc::Neg;
    sub Stack::Swap;
    pull _Twoc::Temp;
    push (_Twoc::Temp ^ (0 - 1)) + 1;
    sub Stack::Swap;
    return;

"(Value::Comp) => (Value::Int, Sign::Bool)
lab Twoc::Get;
    sub Stack::Swap;
    pull _Twoc::Temp;
    "sign    
    put _Twoc::Sign = (_Twoc::Temp >> 15) & 1;
    push _Twoc::Sign;
    sub Stack::Swap;
    "value
    push (_Twoc::Temp ^ (0 - _Twoc::Sign)) + _Twoc::Sign;
    sub Stack::Swap;
    return;

"(Value::Int, Sign::Bool) => (Value::Comp)
lab Twoc::Set;
    sub Stack::Swap;
    pull _Twoc::Sign;    
    sub Stack::Swap;
    pull _Twoc::Temp;

    push (_Twoc::Temp ^ (0 - _Twoc::Sign)) + _Twoc::Sign;
    sub Stack::Swap;
    return;
    


"(Value1::Comp, Value2::Comp) => (Product::Comp)
lab Twoc::Mul;
    sub Stack::Swap;
    sub Twoc::Get;
    pull _Twoc::Val1;
    pull _Twoc::Sgn1;
    sub Stack::Swap;
    sub Twoc::Get;
    pull _Twoc::Val2;
    pull _Twoc::Sgn2;

    "value
    push _Twoc::Val1;
    push _Twoc::Val2;
    sub Math::Mul;

    "sign
    push _Twoc::Sgn1 ^ _Twoc::Sgn2;

    sub Twoc::Set;
    sub Stack::Swap;
    return;

"(Num::Comp, Den::Comp) => (Frac::Comp)
lab Twoc::Div;
    sub Stack::Swap;
    sub Twoc::Get;
    pull _Twoc::Val2;
    pull _Twoc::Sgn2;
    sub Stack::Swap;
    sub Twoc::Get;
    pull _Twoc::Val1;
    pull _Twoc::Sgn1;

    "value
    push _Twoc::Val1;
    push _Twoc::Val2;
    sub Math::Div;

    "sign
    push _Twoc::Sgn1 ^ _Twoc::Sgn2;

    sub Twoc::Set;
    sub Stack::Swap;
    return;

"(Big::Comp, Small::Comp) => (True::Bool)
"True::Bool is true if Big::Comp > Small::Comp
lab Twoc::Cmp;
    sub Stack::Swap;
    sub Twoc::Get;
    pull _Twoc::Val2; "small
    pull _Twoc::Sgn2;
    sub Stack::Swap;
    sub Twoc::Get;
    pull _Twoc::Val1; "big
    pull _Twoc::Sgn1;

    "check sign
    jump Twoc::Cmp::True ~ _Twoc::Sgn1 < _Twoc::Sgn2;
    jump Twoc::Cmp::False ~ _Twoc::Sgn1 > _Twoc::Sgn2;
    "check value
    jump Twoc::Cmp::True ~ _Twoc::Val1 > _Twoc::Val2;
    jump Twoc::Cmp::False ~ _Twoc::Val1 < _Twoc::Val2;
    
    "Big::Comp == Small::Comp, i luv label mechanisms
    lab Twoc::Cmp::False;
        push 0;
        sub Stack::Swap;
        return;

    lab Twoc::Cmp::True;
        push 1;
        sub Stack::Swap;
        return;

"(Value::Comp, Offset::Comp) => (Value::Comp)
"Value::Comp *= (2 ** Offset::Comp)
lab Twoc::Shift;
    sub Stack::Swap;
    sub Twoc::Get;
    pull _Twoc::Val2; "offset
    pull _Twoc::Sgn2;
    sub Stack::Swap;
    sub Twoc::Get;
    pull _Twoc::Val1; "value
    pull _Twoc::Sgn1;
    
    push _Twoc::Val1;
    push _Twoc::Val2;
    sub Math::Shg ~ _Twoc::Sgn2 == 0;
    sub Math::Shs ~ _Twoc::Sgn2 == 1;
    
    push _Twoc::Sgn1;
    sub Twoc::Set;
    sub Stack::Swap;
    return;


lab Twoc::Skip;

