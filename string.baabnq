use 'libs/math.baabnq';
use 'libs/stack.baabnq';
jump String::Skip;

"(Str::String*) => IO
lab String::PrintString;
lab String::Print;
    sub Stack::Swap;
    pull _StringPtr;


    lab String::PrintString::PrintLoop;
    put _Data <- _StringPtr;
    jump String::PrintString::Exit ~ _Data == 0;

    putchr _Data;

    put _StringPtr = _StringPtr + 1;
    jump String::PrintString::PrintLoop;
    lab String::PrintString::Exit;
    return;

"takes number, converts it to string
"THIS WILL ALLOCATE MEMORY
"(Num::Int) => (Str::String*)
lab String::Int2Str;
    sub Stack::Swap;
    pull _Num;

    "16-bit int limit is 65535, so 5 digits plus terminator
    new 6 _pStr;
    put 0 -> _pStr + 5;
    put _pWrite = _pStr;

    "keep track of trailing
    put _IsContent = 0;
    
    "populate string from start to end
    put _PlaceVal = 10000;
    put _Index = 0;
    lab String::Int2Str::Loop;
        put _Count = 0;
        lab String::Int2Str::DivLoop;
            jump String::Int2Str::DivDone ~ _Num == 0;
            jump String::Int2Str::DivDone ~ _Num < _PlaceVal;
            put _Count = _Count + 1;
            put _Num = _Num - _PlaceVal;
        jump String::Int2Str::DivLoop;
        lab String::Int2Str::DivDone;

        push _Index; "i love baabnq

        push _PlaceVal;
        push 10;
        sub Math::Div;
        pull _PlaceVal;

        pull _Index;

        "check trailing, _IsContent is 0 while _Count is 0, that's why we or
        put _IsContent = _IsContent | _Count;

        "skip trailing 0s
        jump String::Int2Str::SkipWrite ~ _IsContent == 0;
            put _Count + 48 -> _pWrite;
            put _pWrite = _pWrite + 1;
        lab String::Int2Str::SkipWrite;

        put _Index = _Index + 1;
    jump String::Int2Str::Loop ~ _Index < 5;

    "special case
    jump String::Int2Str::SkipSpe ~ _IsContent != 0;
        put 48 -> _pStr;
    lab String::Int2Str::SkipSpe;

    push _pStr;
    sub Stack::Swap;
    
    return;

    


"(Str::String*) => (Len::Int)
"len :: [Char] -> Int
"len [] = 0
"len (x:xs) = ( len xs ) + 1
"( ergo, length without terminator )
lab String::StrLen;
    pull _ReturnAddr;
    pull _StringPtr;


    put _SizeBuffer = 0;
    lab String::StrLen::CountLoop;
    put _Data <- _SizeBuffer + _StringPtr;

    jump String::StrLen::Exit ~ _Data == 0;

    put _SizeBuffer = _SizeBuffer + 1;
    jump String::StrLen::CountLoop;
    lab String::StrLen::Exit;


    push _SizeBuffer;
    push _ReturnAddr;
    return;
    

"(Src::Int*, Dst::Int*, Size::Int)
lab String::MemCpy;
    sub Stack::Swap;
    pull _size;
    sub Stack::Swap;
    pull _pDest;
    sub Stack::Swap;
    pull _pSrc;

    put _index = 0;

    lab String::MemCpy::Loop;
    jump String::MemCpy::Exit ~ _index == _size;
        put _data <- _pSrc  + _index;
        put _data -> _pDest + _index;

        put _index = _index + 1;
    jump String::MemCpy::Loop;
    lab String::MemCpy::Exit;
    
    return;

"(Src::String*, Dst::String*)    
lab String::StrCpy;
    sub Stack::Swap;
    pull _pDst;
    sub Stack::Swap;
    pull _pSrc;
    
    lab String::StrCpy::Loop;
        put _data <- _pSrc; put _pSrc = _pSrc + 1;
        put _data -> _pDst; put _pDst = _pDst + 1;
        
    jump String::StrCpy::Loop ~ _data != 0;
    
    return;
    
"(Ptr::String*, Val::Int, Size::Int)
lab String::MemSet;
    sub Stack::Swap;
    pull _size;
    sub Stack::Swap;
    pull _val;
    sub Stack::Swap;
    pull _ptr;
    
    lab String::MemSet::Loop;
        jump String::MemSet::Exit ~ _size == 0;
        put _size = _size - 1;
        
        put _val -> _ptr;
        put _ptr =  _ptr + 1;
    jump String::MemSet::Loop;
    lab String::MemSet::Exit;
    
    return;
    
    
    
"(Str1::String*, Str2::String*) => (Match::Bool)
"Match::Bool = Str1::String* == Str2::String*
lab String::MemCmp;
lab String::StrCmp;
    sub Stack::Swap;
    pull _pStr2;
    sub Stack::Swap;
    pull _pStr1;
    
    lab String::MemCmp::Loop;
        put _val1 <- _pStr1;
        put _val2 <- _pStr2;
        
        jump String::MemCmp::Done ~ _val1 == 0;
        jump String::MemCmp::Done ~ _val1 != _val2;
        
        put _pStr1 = _pStr1 + 1;
        put _pStr2 = _pStr2 + 1;
    jump String::MemCmp::Loop;
    lab String::MemCmp::Done;
    
    push _val1 - _val2;
    sub Stack::Swap;
    return;       


"(Str::String*, Elem::Char) => (Match::Bool)
"Match::Bool = Elem::Char in Str::String*
lab String::ScanChar;
lab String::MemChr;
lab String::StrChr;
    sub Stack::Swap;
    pull _Char;
    sub Stack::Swap;
    pull _StrPtr;

    lab String::ScanChar::IterLoop;
        put _Data <- _StrPtr;
        put _StrPtr = _StrPtr + 1;
                
        jump String::ScanChar::Found    ~ _Data == _Char;
        jump String::ScanChar::IterLoop ~ _Data != 0;
        
        push 0;
        sub Stack::Swap;
        return;

    lab String::ScanChar::Found;
        push 1;
        sub Stack::Swap;
        return;


"THIS WILL ALLOC AND NOT DEALLOC
"(Str1::String*, Str2::String*) => (Res::String*)
"Res::String* = Str1::String* ++ Str2::String*
lab String::Concat;
    sub Stack::Swap;
    pull _pStr2;
    sub Stack::Swap;
    pull _pStr1;

    push _pStr1;
    sub String::StrLen;
    pull _len1;

    push _pStr2;
    sub String::StrLen;
    pull _len2;

    put _len = _len1 + _len2;
    new _len + 1 _pStr;
    put 0 -> _pStr + _len + 1;

    push _pStr1;
    push _pStr;
    push _len1;
    sub String::MemCpy;
    push _pStr2;
    push _pStr + _len1;
    push _len2;
    sub String::MemCpy;

    push _pStr;
    sub Stack::Swap;
    return;


"takes const char** and join strings into one DOES NOT DEALLOC
"substr most contain size at -1, too lazy to implement properlly

"(Container::Char**) => (Sequence::Char*)
"join :: [[Char]] -> [Char]
"join [] = []
"join (x:xs) = x ++ join xs
lab String::Join;
    sub Stack::Swap;
    pull _pStrs;

    "calculate final len
    put _Count = 0;
    put _Index = 0;
    lab String::Join::Count;
        put _pSub <- _pStrs + _Index;
        jump String::Join::CountDone ~ _pSub == 0;
        push _pSub; 
        sub String::StrLen; 
        pull _Size;
        put _Count = _Count + _Size;
        put _Index = _Index + 1;
    jump String::Join::Count;
    lab String::Join::CountDone;

    "alloc
    new _Count + 1 _pOut;
    put 0 -> _pOut + _Count;    

    "copy
    put _iStrs = 0;
    put _iOut = 0;
    lab String::Join::Copy;
        put _pSub <- _pStrs + _iStrs;
        put _iStrs = _iStrs + 1;
        jump String::Join::CopyDone ~ _pSub == 0;

        push _pSub; 
        sub String::StrLen; 
        pull _Size;

        push _pSub;
        push _pOut + _iOut;
        push _Size;
        put _iOut = _iOut + _Size; "move _pOut over to free memory
        sub String::MemCpy;

    jump String::Join::Copy;
    lab String::Join::CopyDone;

    push _pOut;
    sub Stack::Swap;
    return;






" --- VVV DANGER VVV ---

"takes a list of char from the stack and converts it into an int
"order of char can be changed be setting config to a 1
lab String::StackChar2Int;
    sub Stack::Swap;
    pull _Config;
    put _Buffer = 0;
    put _IndexInit = 0;

    "init _Index to a value base on config
    sub String::StackChar2Int::SetIndexInit1     ~ _Config == 0;
    sub String::StackChar2Int::SetIndexInit10000 ~ _Config == 1;
    put _Index = _IndexInit;

    lab String::StackChar2Int::AccLoop;
    sub Stack::Swap;
    pull _Data; 
    "check for terminator
    jump String::StackChar2Int::Exit ~ _Data == 0;

    push _Data - 48; 
    push _Index; 
    sub Math::Mul; 
    pull _Data; 
    put _Buffer = _Buffer + _Data;

    push _Index;
    push 10;
    sub Math::Mul ~ _Config == 0;
    sub Math::Div ~ _Config == 1;
    pull _Index;

    jump String::StackChar2Int::AccLoop ~ _Index != _IndexInit;
    lab String::StackChar2Int::Exit;

    push _Buffer;
    sub Stack::Swap;
    return;

    lab String::StackChar2Int::SetIndexInit1;
        put _IndexInit = 1;
        return;
    lab String::StackChar2Int::SetIndexInit10000;
        put _IndexInit = 10000;
        return;




lab String::Skip;

