use 'libs/stack.baabnq';
use 'libs/math.baabnq';

jump Chunk::Skip;

"(X::Int*) => (Len::Int)
lab Chunk::Len;
    sub Stack::Swap;
    pull _x;

    put _len <- _x - 1;
    
    push _len;
    sub Stack::Swap;
    return;


"(X::Int*) => (Sum::Int)
"sum :: [Int] -> Int
"sum [] = 0
"sum (x:xs) = x + sum xs
lab Chunk::Sum;
    sub Stack::Swap;
    pull _x;
    
    put _i <- _x - 1;
    put _sum = 0;
    lab Chunk::Sum::Loop;
        put _i = _i - 1;
        put _data <- _x + _i;
        put _sum = _sum + _data;
    jump Chunk::Sum::Loop ~ _i > 0;
    
    push _sum;
    sub Stack::Swap;
    return;
    
"(X::Int*) => (Avg::Int)
"avg :: [Int] -> Int
"avg x = sum x / len x
lab Chunk::Avg;
    sub Stack::Swap;    
    
    sub Stack::Dup;
    sub Chunk::Sum;
    sub Stack::Swap;
    sub Chunk::Len;
    
    sub Math::Div;
    
    sub Stack::Swap;
    return;


"(Elem::A, X::A*) => (Index::Int)
"index :: a -> [a] -> Maybe Int
"index x [] = Nothing
"index x (y:ys)
"    | x == y = 0
"    | otherwise = case (index x xs) of
"                    Nothing -> Nothing
"                    Just x  -> Just (x+1)
lab Chunk::Index;
    sub Stack::Swap;
    pull _x;
    sub Stack::Swap;
    pull _elem;
    
    put _i <- _x - 1;
    put _index = 0 - 1;
    lab Chunk::Index::Loop;
        put _i = _i - 1;
        put _data <- _x + _i;
        jump Chunk::Index::Skip ~ _data != _elem;
            put _index = _i;
        lab Chunk::Index::Skip;
    jump Chunk::Index::Loop ~ _i > 0;
    
    push _index;
    sub Stack::Swap;
    return;


"(Elem::A, X::A*) => (Index::Int)
"count :: a -> [a] -> Int
"count x [] = 0
"count x (y:ys) = (count x ys) + (if x == y then 1 else 0)
lab Chunk::Count;
    sub Stack::Swap;
    pull _x;
    sub Stack::Swap;
    pull _elem;
    
    put _i <- _x - 1;
    put _count = 0;
    lab Chunk::Count::Loop;
        put _i = _i - 1;
        put _data <- _x + _i;
        jump Chunk::Count::Skip ~ _data != _elem;
            put _count = _count + 1;
        lab Chunk::Count::Skip;
    jump Chunk::Count::Loop ~ _i > 0;
    
    push _index;
    sub Stack::Swap;
    return;






lab Chunk::Skip;