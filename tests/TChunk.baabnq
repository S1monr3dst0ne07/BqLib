
use 'libs/tests/common.baabnq';
use 'libs/chunk.baabnq';
use 'libs/rand.baabnq';
use 'libs/no.baabnq';


lab TestChunk::Len;
    put _i = 0;
    
    lab Local::TestChunk::Len::Loop;
        new _i _p;
        
        push _p;
        sub Chunk::Len;
        pull __;
        jump fail ~ __ != _i;
        
        free _p;
        
        put _i = _i + 10;
    jump Local::TestChunk::Len::Loop ~ _i < 10000;
    
    jump succ;
    
    
lab TestChunk::Sum;
    put _size = 200;
    new _size _p;
    
    put _total = 0;
    
    put _i = 0;
    put _j = _size - 1;
    lab Local::TestChunk::Sum::Loop;
        sub Rand::Xorshift;
        pull _k;
        put _k -> _p + _j;
        put _total = _total + _k;

        push _p;
        sub Chunk::Sum;
        pull __;
                
        jump fail ~ __ != _total;
    
        put _i = _i + 1;
        put _j = _j - 1;
    jump Local::TestChunk::Sum::Loop ~ _i < _size; 
    
    free _p;
    
    jump succ;

"only case based because the average routine is based on already tested subroutines
lab TestChunk::Avg;
    "sanity check
    new 2 _p;
    put 10 -> _p + 0;
    put 20 -> _p + 1;    
    push _p;
    sub Chunk::Avg;
    pull __;
    free _p;
    jump fail ~ __ != 15; 

    new 3 _p;
    put 10 -> _p + 0;
    put 20 -> _p + 1;
    put 30 -> _p + 2;
    push _p;
    sub Chunk::Avg;
    pull __;
    free _p;
    jump fail ~ __ != 20;

    new 10 _p;
    push _p;
    push 0;
    push 10;
    sub Chunk::Range;
    push _p;
    sub Chunk::Avg;
    pull __;
    free _p;
    jump fail ~ __ != 4; "4.5


    new 'hello world' _p;
    push _p;
    sub Chunk::Avg;
    pull __;
    free _p;
    jump fail ~ __ != 93; 
    "turns out the average of hello world is 93
    "who would have thought
    
    jump succ;
        

lab TestChunk::Sort;    
    put _size = 64; "has to be power of two
    
    put _l = 0;
    new _size _p;
    push _p;
    push 0;
    push _size;
    sub Chunk::Range;
    "more edge cases
    put 10     -> _p + 20;
    put 10000  -> _p + 30;
    put 69     -> _p + 31;
       
    lab Local::TestChunk::Sort::Loop;
                
        put _i = 0;
        lab Local::TestChunk::Sort::Scramble;
            push _i;
            sub Local::TestChunk::Sort::OneScramble;
            pull _i;
            put _i = _i + 1;
        jump Local::TestChunk::Sort::Scramble ~ _i < _size;


        push _p;
        push _size;
        sub Chunk::Sort;

        
        put _i = 0;
        lab Local::TestChunk::Sort::Check;
            put _a <- _p + _i;
            put _b <- _p + _i + 1;
            jump fail ~ _a > _b;
        
            put _i = _i + 1;
        jump Local::TestChunk::Sort::Check ~ _i < _size - 1;
        
        put _l = _l + 1;
    jump Local::TestChunk::Sort::Loop ~ _l < 50;
    free _p;
    
    jump succ;
    
    lab Local::TestChunk::Sort::OneScramble;
        sub Rand::Xorshift;
        sub Rand::Xorshift;
        pull _i;
        pull _j;
        put _i = _i & (_size - 1);
        put _j = _j & (_size - 1);
        put _a <- _p + _i;
        put _b <- _p + _j;
        put _b -> _p + _i;
        put _a -> _p + _j;
    return;


lab TestChunk::Range;


