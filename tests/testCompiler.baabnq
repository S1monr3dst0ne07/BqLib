use 'libs/tests/common.baabnq';



lab TestCompiler::Addition;
    jump fail ~ (5 + 3) != 8;
    jump succ;

lab TestCompiler::Subtraction;
    jump fail ~ (5 - 3) != 2;
    jump succ;
    
lab TestCompiler::And;
    jump fail ~ (5 & 3) != 1;
    jump succ;

lab TestCompiler::Or;
    jump fail ~ (5 | 3) != 7;
    jump succ;

lab TestCompiler::Xor;
    jump fail ~ (5 ^ 3) != 6;
    jump succ;

lab TestCompiler::ShiftGreat;
    jump fail ~ (5 << 3) != 40;
    jump succ;

lab TestCompiler::ShiftSmall;
    jump fail ~ (5 >> 3) != 0;
    jump succ;


lab TestCompiler::ExpressionEvaluation;
    jump fail ~ (2 + 3 - 1 ^ 5 | 8 & 15) != 9;    
    jump succ;



lab TestCompiler::IntegerLimit;
    "(1 << 16) will be statically optimized to zero by the compiler
    jump fail ~ (1 << 16) != 0;
    jump succ;
    
lab TestCompiler::IntegerOverflow;
    jump fail ~ (65535 + 1) != 0;
    jump succ;
    
lab TestCompiler::IntegerUnderflow;
    jump fail ~ (0 - 1) != 65535;
    jump succ;


lab TestCompiler::HeapAlignment;
    "heap origin is to be aligned to the start of the upper half of memory
    new 1 __;
    "heap origin is (__ - 1) because of chunk format
    jump fail ~ (__ - 1) != (1 << 15);
    jump succ;
    
lab TestCompiler::StaticMemoryLength;
    static 5 __;
    put __ <- __ - 1;
    put __ = __ - 1; "subtract length
    jump fail ~ __ != 5;
    jump succ;
    
lab TestCompiler::StaticStringLength;
    static 'hello' __;
    put __ <- __ - 1;
    put __ = __ - 1; "subtract length
    put __ = __ - 1; "subtract terminator
    jump fail ~ __ != 5;
    jump succ;

lab TestCompiler::DynamicMemoryLength;
    new 5 __;
    put __ <- __ - 1;
    put __ = __ - 1; "subtract length
    jump fail ~ __ != 5;
    jump succ;
    
lab TestCompiler::DynamicStringLength;
    new 'hello' __;
    put __ <- __ - 1;
    put __ = __ - 1; "subtract length
    put __ = __ - 1; "subtract terminator
    jump fail ~ __ != 5;
    jump succ;


lab TestCompiler::OperatorEvaluationOrder;
    "always left to right, no precedence
    jump fail ~ (1 << 1 + 1) != 3;
    jump fail ~ (1 + 1 << 1) != 4;
    
    jump succ;
    
     
lab TestCompiler::BracketEvaluationOrder;
    jump fail ~ (1 << (1 + 1)) != 4;
    jump fail ~ (1 + (1 << 1)) != 3;

    jump succ;
        
        
lab TestCompiler::ShiftLoopGeneration;
    put _volatile = 2;
    
    jump fail ~ (1 << _volatile) != 4;
    jump fail ~ (4 >> _volatile) != 1;
    
    jump succ;
    




