
use 'libs/tests/common.baabnq';
use 'libs/string.baabnq';
use 'libs/rand.baabnq';
use 'libs/chunk.baabnq';




lab TestString::Int2Str;
    
    push 12345;
    sub String::Int2Str;    
    new '12345' _pReference;
    push _pReference;
    sub String::StrCmp;
    pull __;
    jump fail ~ __ != 0;
    free _pReference;
    
    push 100;
    sub String::Int2Str;
    new '  100' _pReference;
    push _pReference;
    sub String::StrCmp;
    pull __;
    jump fail ~ __ != 0;
    free _pReference;

    push 0;
    sub String::Int2Str;
    new '    0' _pReference;
    push _pReference;
    sub String::StrCmp;
    pull __;
    jump fail ~ __ != 0;
    free _pReference;

    jump succ;



lab TestString::Str2Int;
    "Str2Int and Int2Str are inversely symmetric
    
    push (0 - 1);
    lab Local::TestString::Str2Int::Loop;
        sub Stack::Dup;
        
        sub String::Int2Str; "generate
        sub Stack::Dup;
        sub String::Str2Int;
        
        pull _t;
        pull __; free __;        
        pull _i;

        jump fail ~ _i != _t;
        jump Local::TestString::Str2Int::Done ~ _i == 0;

        push _i >> 1;
        jump Local::TestString::Str2Int::Loop;
    lab Local::TestString::Str2Int::Done;
    
    
    "edge case with non-numerics
    new ' 0 0 0  2a1h e l l o3world9 _!?%()?ยง$&/ ' _p;
    push _p;
    sub String::Str2Int;
    pull __;
    jump fail ~ __ != 2139;
    free _p;
    
    jump succ;
    
    



lab TestString::StrLen;
    new 'hello world!' _p;
    push _p;
    sub String::StrLen;
    pull __;
    jump fail ~ __ != 12;
    free _p;
    
    put _i = 100;
    lab Local::TestString::StrLen::Loop;
        push _i;
        sub Rand::Xorshift;
        pull __;
        put __ = (__ & 2047);
        push __;
        
        new __ + 1 _p;
        push _p;
        push 1;
        push __;
        sub String::MemSet;
        put 0 -> _p + __;
        
                        
        push _p;
        sub Stack::Dup;
        sub String::StrLen;
        pull _len;
        pull _p;
                

        pull __;
        pull _i;
        jump fail ~ __ != _len;
                
        free _p;

        put _i = _i - 1;
    jump Local::TestString::StrLen::Loop ~ _i > 0;
        
    jump succ;




"kinda important
lab TestString::MemCpy;
    
    put _i = 10;
    lab Local::TestString::Loop;
        push _i;
    
        sub Rand::Xorshift;
        pull _len;
        put _len = _len & 511;
        new _len _pOriginal;
        
        put _j = 0;
        lab Local::TestString::Loop::Populate;
            sub Rand::Xorshift;
            pull __;
            put __ -> _pOriginal + _j;
            put _j = _j + 1;
        jump Local::TestString::Loop::Populate ~ _j < _len;
        
        new _len _pCopy;
        
        push _pOriginal;
        push _pCopy;
        push _len;
        sub String::MemCpy;
        
        push _pOriginal;
        sub Chunk::Hash;
        
        push _pCopy;
        sub Chunk::Hash;
        
        pull _t1;
        pull _t2;
        
        pull _i;
        
        jump fail ~ _t1 != _t2;
                
        free _pOriginal;
        free _pCopy;
        put _i = _i - 1;    
    jump Local::TestString::Loop ~ _i > 0;
    
    jump succ;
    
    
    
lab TestString::StrCpy;

    new 'hello world' _pOriginal;
    put _len <- _pOriginal - 1;
    new _len _pCopy;


    push _pOriginal;
    push _pCopy;
    sub String::StrCpy;
    
    lab Local::TestString::StrCpy::Loop;
        put _a <- _pOriginal; put _pOriginal = _pOriginal + 1;
        put _b <- _pCopy;     put _pCopy     = _pCopy     + 1;
        
        jump fail ~ _a != _b;
        
    jump Local::TestString::StrCpy::Loop ~ _a != 0;
    
    free _pOriginal;
    free _pCopy;    
    jump succ;
    
    
"also kinda important
lab TestString::MemSet;
    
    put _len = 127;
    new _len _p;
    
    put _testI = 100;
    lab Local::TestString::MemSet::Loop;        
        sub Rand::Xorshift; pull _testValue;
        sub Rand::Xorshift; pull __; 
        
        "test length must not be zero
        put _testLen = (__ & _len) | 1;

        push _p;
        push _testValue;
        push _testLen;        
        sub String::MemSet;
        
        put _i = _testLen;
        lab Local::TestString::MemSet::Verify;
            put _i = _i - 1;
            put __ <- _p + _i;
            
            jump fail ~ __ != _testValue;
            
        jump Local::TestString::MemSet::Verify ~ _i > 0;
        
        put _testI = _testI - 1;
    jump Local::TestString::MemSet::Loop ~ _testI > 0;
            
    jump succ;    


lab TestString::StrChr;

    new 'jzwcpmtnoixaykrfgelvhusdqb' _p;
    put _i = 0;
    lab Local::TestString::StrChr;
        put _v <- _p + _i;
        push _p;
        push _v;
        sub String::StrChr;
        pull __; jump fail ~ __ == 1;
        put _i = _i + 1;
    jump Local::TestString::StrChr ~ _i < 26;
    
    free _p;
        


    new 'hello world!' _p;
    push _p;
    push 33; "!
    sub String::StrChr;
    pull __; jump fail ~ __ != _p + 11;
    free _p;

    new 'qwerty \n \b \r   .,#12345{}() BC' _p;
    push _p;
    push 65; "A
    sub String::StrChr;
    pull __; jump fail ~ __ != 0;
    free _p;

    new '' _p;
    push _p;
    push 65; "A
    sub String::StrChr;
    pull __; jump fail ~ __ != 0;
    free _p;
        
    jump succ;

    

