
use 'libs/tests/common.baabnq';

put _upper16 = 0;
put _posNaN = 0;
put _FpZero = 0;
put _MANTISSA_SIZE = 0;
put _EXPONENT_SIZE = 0;
put _SIGN_SIZE = 0;
put _MANTISSA_MASK = 0;
put _EXPONENT_MASK = 0;
put _SIGN_MASK = 0;
put _MIN_SIGNED_CHAR = 0;

"library has to run, to define consts
lab fInit;
static 1 _pTst; "test ptr
use 'libs/float.baabnq';
return;


"check constants
lab TestFloats::Const;
    sub fInit;

    "shared consts
    jump fail ~ _upper16 != 65280;
    jump fail ~ _posNaN != 16256;
    jump fail ~ _FpZero != 16384;    

    "system consts
    jump fail ~ _MANTISSA_SIZE != 8;
    jump fail ~ _EXPONENT_SIZE != 8;
    jump fail ~ _SIGN_SIZE     != 15;

    jump fail ~ _MANTISSA_MASK != 127;
    jump fail ~ _EXPONENT_MASK != 255;
    jump fail ~ _SIGN_MASK     != 32768;

    jump fail ~ _MIN_SIGNED_CHAR != 128;

    jump succ;

lab TestFloats::GetMantissa;
    sub fInit;
    
    "msb is implied to save space    
    push 0;
    sub Floats::GetMantissa;
    pull _v;
    jump fail ~ _v != 128;

    push 127;
    sub Floats::GetMantissa;
    pull _v;
    jump fail ~ _v != 128 | 127;
    
    jump succ;


lab TestFloats::GetExponent;
    sub fInit;
    
    "zero should be zero
    push 0 << 7; "<< 7 for symmetry
    sub Floats::GetExponent;
    pull _v;
    jump fail ~ _v != 0;

    "!zero should be !zero (>> 7)
    push 255 << 7;
    sub Floats::GetExponent;
    pull _v;
    jump fail ~ _v != 255;
    
    jump succ;

lab TestFloats::SetMantissa;
    sub fInit;

    "!zero against zero
    put (0 - 1) -> _pTst;
    push _pTst;
    push 0;
    sub Floats::SetMantissa;
    put _v <- _pTst;
    jump fail ~ _v != ((1 << 15) | (255 << 7));

    "other way round
    put 0 -> _pTst;
    push _pTst;
    push (0 - 1); "maxint will be capped by _MANTISSA_MASK
    sub Floats::SetMantissa;
    put _v <- _pTst;
    jump fail ~ _v != 0 | (127 << 0);
    

    jump succ;


lab TestFloats::SetExponent;
    sub fInit;

    "!zero against zero
    put (0 - 1) -> _pTst;
    push _pTst;
    push 0;
    sub Floats::SetExponent;
    put _v <- _pTst;
    jump fail ~ _v != ((1 << 15) | (127 << 0));

    "other way round
    put 0 -> _pTst;
    push _pTst;
    push (0 - 1); "maxint will be capped by _EXPONENT_MASK
    sub Floats::SetExponent;
    put _v <- _pTst;
    jump fail ~ _v != 0 | (255 << 7);
    

    jump succ;


lab TestFloats::Inv16;
    sub fInit;

    push 0; "zero should be zero
    sub Floats::Inv16;
    pull _v;
    jump fail ~ _v != 0;

    push 255;
    sub Floats::Inv16;
    pull _v;
    jump fail ~ _v != ((255 << 8) | 1);

    jump succ;

lab TestFloats::Inv8;
    sub fInit;

    push 0; "zero should be zero
    sub Floats::Inv8;
    pull _v;
    jump fail ~ _v != 0;

    push 255;
    sub Floats::Inv8;
    pull _v;
    jump fail ~ _v != (0 | 1);

    jump succ;


lab TestFloats::SetSign;
    sub fInit;

    push 0;
    sub Floats::SetSign;
    pull _v;
    jump fail ~ _v != (1 << 15);

    push ((1 << 15) - 1);
    sub Floats::SetSign;
    pull _v;
    jump fail ~ _v != (1 << 15) | ((1 << 15) - 1);

    jump succ;


lab TestFloats::ShiftSmall;
    sub fInit;

    "test zero-shift
    push 378;  "some random value, in this case (float16)1000
    push 16384;
    sub Floats::ShiftSmall;
    pull _v;
    jump fail ~ _v != 378;

    "test n-shift for zero
    push 16384;
    push 32288; "(float16)10
    sub Floats::ShiftSmall;
    sub Floats::Fp2Value;
    pull _v;
    jump fail ~ _v != 0; "isomorphic

    "64 >> 2 = 16
    push 64;
    sub Floats::Value2Fp;
    push 2;
    sub Floats::Value2Fp;
    sub Floats::ShiftSmall;
    sub Floats::Fp2Value;
    pull _v;
    jump fail ~ _v != 16;

    jump succ;

lab TestFloats::ShiftGreat;
    sub fInit;

    "test zero-shift
    push 378;  "some random value, in this case (float16)1000
    push 16384;
    sub Floats::ShiftGreat;
    pull _v;
    jump fail ~ _v != 378;

    "test n-shift for zero
    push 16384;
    push 32288; "(float16)10
    sub Floats::ShiftGreat;
    sub Floats::Fp2Value;
    pull _v;
    jump fail ~ _v != 0; "isomorphic

    "64 << 2 = 256
    push 64;
    sub Floats::Value2Fp;
    push 2;
    sub Floats::Value2Fp;
    sub Floats::ShiftGreat;
    sub Floats::Fp2Value;
    pull _v;
    jump fail ~ _v != 256;

    jump succ;


lab TestFloats::NormalizeAndSet;
    sub fInit;

    "normal (ize, hahahah)
    push _pTst;
    "1 << 0 = 1 (prolly)
    push 1; 
    push 0;
    sub Floats::NormalizeAndSet;
    put _v <- _pTst;
    jump fail ~ _v != 31872;

    "unchangable
    push _pTst;
    "255 << 1 = 510 (prolly)
    push 255; 
    push 1;
    sub Floats::NormalizeAndSet;
    put _v <- _pTst;
    jump fail ~ _v != 255;

    "man0
    push _pTst;
    "0 << 0 = 0 (prolly)
    push 0;
    push 0;
    sub Floats::NormalizeAndSet;
    put _v <- _pTst;
    jump fail ~ _v != 16384;

    "nan/inf
    push _pTst;
    "sil << sil =~ infinity (prolly)
    "signed int limit (sil)
    push (1 << 15) - 1;
    push (1 << 15) - 1;
    sub Floats::NormalizeAndSet;
    put _v <- _pTst;
    jump fail ~ _v != 16256;


    jump succ;

lab TestFloats::TwoC2Fp;
    sub fInit;

    "pos
    push 32640;
    sub Floats::TwoC2Fp;
    pull _v;
    jump fail ~ _v != 1023;

    "zero
    push 0;
    sub Floats::TwoC2Fp;
    pull _v;
    jump fail ~ _v != 16384;

    "neg
    push (32640 ^ 65535) - 1;
    sub Floats::TwoC2Fp;
    pull _v;
    jump fail ~ _v != 1023 | (1 << 15);

    jump succ;



lab TestFloats::Value2Fp;
    sub fInit;

    "zero for sanity
    push 0;
    sub Floats::Value2Fp;
    pull _v;
    jump fail ~ _v != 16384;

    "max int for rounding (65535 ~> 65280, deltaR = 255, bad ik)
    push 0 - 1;
    sub Floats::Value2Fp;
    pull _v;
    jump fail ~ _v != 1151;

    "shift limit (notice how 1 turns into 31872, BIG normalize)
    push 1;
    sub Floats::Value2Fp;
    pull _v;
    jump fail ~ _v != 31872;
    


    jump succ;
    

lab TestFloats::Fp2Value;
    sub fInit;

    "zero
    push 16384;
    sub Floats::Fp2Value;
    pull _v;
    jump fail ~ _v != 0;

    "pos exponent (65535 rounded => exp = 8)
    push 1151;
    sub Floats::Fp2Value;
    pull _v;
    jump fail ~ _v != 65280;

    "neg exponent (1 => exp = -7)
    push 31872;
    sub Floats::Fp2Value;
    pull _v;
    jump fail ~ _v != 1;

    jump succ;



lab TestFloats::Add;
    sub fInit;

    "A (1000 + 100 = 1100 ~> 1096)
    push 378;   "1000
    push 32712; "100
    sub Floats::Add;
    pull _v;
    jump fail ~ _v != 393; "1096

    "B (100 + 1000 = 1100 ~> 1096)
    push 32712; "100
    push 378;   "1000
    sub Floats::Add;
    pull _v;
    jump fail ~ _v != 393; "1096

    "trust me, there's a difference

    "same exponent (1000 + 1010 = 2010 ~> 2008)
    push 378;   "1000 (man: 250, exp: 2)
    push 380;   "1010 (man: 252, exp: 2)
    sub Floats::Add;
    pull _v;
    jump fail ~ _v != 507; "1096

    "sign stuff
    push 31872;              "1
    push 31872 | _SIGN_MASK; "-1
    sub Floats::Add;
    pull _v;
    jump fail ~ _v != 16384; "1-1 = 0 

    "double sign
    push 31872 | _SIGN_MASK; "-1
    push 31872 | _SIGN_MASK; "-1
    pull _v;
    jump fail ~ _v != 32000 | _SIGN_MASK; "-1-1 = -2 
    
    jump succ;












